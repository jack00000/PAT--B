/*小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。
于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；
如果不是，那么告诉她缺了多少珠子。
为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图1中，第3串是小红想做的珠串；YrR8RrY
那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。



输入格式：
每个输入包含1个测试用例。每个测试用例分别在2行中先后给出摊主的珠串和小红想做的珠串，两串都不超过1000个珠子。
输出格式：
如果可以买，则在一行中输出“Yes”以及有多少多余的珠子；如果不可以买，则在一行中输出“No”以及缺了多少珠子。其间以1个空格分隔。
输入样例1：ppRYYGrrYBR2258YrR8RrY
输出样例1：Yes 8
输入样例2：ppRYYGrrYB225YrR8RrY
输出样例2：No 2
分析

先新建珠串表，用于统计同一字母出现的个数，遍历字符串1，根据每个字符串的ASCII码，将与ASCII码对应索引的珠串表的数值自增1，然后按照字符串2，再将对应索引的珠串表的数值自减2，如果等于0，则将缺少珠子的个数自增1。
最后，根据缺少珠子的个数判断是否缺珠子，如果不缺珠子，输出两个字符串长度的差，即为多的珠子数；如果缺珠子，输出缺少珠子的个数即可。

源代码
*/
//C/C++实现
#include <iostream>
#include <string>

using namespace std;

int beads[123]; //'z'的ASCII码是122，所以声明123个空间 

int main(){
    string s1, s2;
    cin >> s1 >> s2;
    for(int i = 0; i < s1.size(); ++i){
        ++beads[s1[i]];
    }
    int lack = 0;
    for(int i = 0; i < s2.size(); ++i){
        if(beads[s2[i]] == 0){
            ++lack;
        }
        else{
            --beads[s2[i]];
        }
    }
    if(lack == 0){ //全部包含 
        printf("Yes %d\n", s1.size() - s2.size());
    }
    else{
        printf("No %d\n", lack);
    }
    return 0;
}
