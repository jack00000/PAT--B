/*本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印
*****
***
*
***
*****
（按中心居中打印，这里无法显示居中效果）
所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，
再从小到大顺序递增；首尾符号数相等。
给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。
输入格式：
输入在一行给出1个正整数N（<=1000）和一个符号，中间以空格分隔。
输出格式：
首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。
输入样例：
19 *
输出样例：
*****
***
*
***
*****
（按中心居中打印，这里无法显示居中效果）
2
分析

1.先求出余数，因为沙漏的中心是一点，然后每次增加两层，所以是(n - 1) / 2，
然后再从i = 3开始减，一直减到小于2 * i为止，即为余数。
2.还要记录最大层的字符数，用到了刚才计算余数的方法，最大层的字符数就是最后一次的i的值。
3.然后如果和我是相同做法的，还要考虑不能凑成沙漏的情况，即最小的沙漏型是由7个字符组成的，要为小于6个字符的单独写处理的方法。

源代码
*/ 
//C/C++实现
#include <iostream>

using namespace std;

int main(){
    int n;
    char c;
    scanf("%d %c", &n, &c);
    if(n == 1){
        printf("%c\n0\n", c);
        return 0;
    }
    int rest = n, max = 0;
    for(int i = 1; rest >= 2 * i; i += 2){
        if(i == 1){
            rest -= i;
        }
        else{
            rest -= (2 * i);
            max = i;
        }
    }
    if(n < 7){
        printf("%c\n", c);
    }
    int blank = 0;
    for(int j = max; j > 0; j -= 2, ++blank){
        for(int k = 0; k < blank; ++k){
            printf("%c", ' ');
        }
        for(int l = 0; l < j; ++l){
            printf("%c", c);
        }
        printf("%c", '\n');
    }
    blank -= 2;
    for(int m = 3; blank >= 0; --blank, m += 2){
        for(int n = 0; n < blank; ++n){
            printf("%c", ' ');
        }
        for(int o = 0; o < m; ++o){
            printf("%c", c);
        }
        printf("%c", '\n');
    }
    printf("%d\n", rest);
    return 0;
}

